@page "/chat"

@using ChatApp.Shared
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations
@using System.Collections.Concurrent

@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime ;

<h3>Online Users</h3>
<ul class="online-users">
    <Virtualize Items="usernames" Context="user">
        <li> @user</li>
    </Virtualize>
</ul>
<h3>Chat History</h3>
<ul class="chat-window">
    <Virtualize Items="messageHistory.OrderBy(m=>m.MessageDate).ToList()" Context="message">
        <li class="broadcast-message">
            <div class="chat-message">
                @message.Message

            </div>
            <div class="chat-meta">
                @message.MessageDate -  @message.UserName
            </div>
        </li>
    </Virtualize>
</ul>
<h3>Chat</h3>
<ul class="chat-window">
    <Virtualize Items="messages.OrderBy(m=>m.MessageDate).ToList()" Context="message">
        <li class=" @(message.UserName == chatMessage.UserName ? "user-message" : @message.UserName == "ADMIN"? "chat-user" :"broadcast-message")">
            <div class="chat-message">
                @message.Message
            </div>
            <div class="chat-meta">
                @message.MessageDate -  @message.UserName

            </div>
        </li>
    </Virtualize>
</ul>


<EditForm Model="chatMessage" OnValidSubmit="SendMessage">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <div class="col-form-label">Message</div>
        <InputText class="form-control" @bind-Value="chatMessage.Message"></InputText>
        <ValidationSummary></ValidationSummary>
        <button class="btn mt-1 btn-primary" type="submit">Send</button>
    </div>
</EditForm>

@code {
    List<ChatMessage> messages = new();
    List<ChatMessage> messageHistory = new();
    List<string> usernames = new();
    HubConnection hubConnection;
    ChatMessage chatMessage = new();

    protected override async Task OnInitializedAsync()
    {
        await SetChatUserName();
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.BaseUri + "hubs/ChatHub").Build();
        hubConnection.On<string, string, DateTime>("SendMessage", async (message, userName, messageDate) =>
          {
              var newMessage = new ChatMessage { UserName = userName, Message = message, MessageDate = messageDate };
              messages.Add(newMessage);
              StateHasChanged();

          });
        hubConnection.On<List<ChatMessage>>("SendHistory", async (oldMessages) =>
        {
            messageHistory.AddRange(oldMessages);
            StateHasChanged();
        });
        hubConnection.On<List<string>>("RefreshUserNames", async (loggedOnUsers) =>
        {
            ChatMessage c = new ChatMessage { MessageDate = DateTime.Now };
            if (loggedOnUsers.Count > usernames.Count)
            {
                var newbie = loggedOnUsers.Where(x => !usernames.Contains(x)).FirstOrDefault();
                c.UserName = "ADMIN";
                c.Message = ($"User {newbie} has joined");
                messages.Add(c);
            }

            if (loggedOnUsers.Count < usernames.Count)
            {
                var quitter = usernames.Where(x => !loggedOnUsers.Contains(x)).FirstOrDefault();
                c.UserName = "ADMIN";
                c.Message = ($"User {quitter} has left.");
                messages.Add(c);
            }
            usernames.Clear();
            usernames.AddRange(loggedOnUsers);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async Task SetChatUserName()
    {
        chatMessage.UserName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userName");
    }

    public async Task SendMessage()
    {
        chatMessage.MessageDate = DateTime.Now;
        await hubConnection.SendAsync("SendMessage", chatMessage.UserName, chatMessage.Message, chatMessage.MessageDate);
        chatMessage.Message = "";
    }
}
