@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations

@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime ;

<h3>Chat</h3>
<div class="container">

</div>
<ul class="chat-window">
    <Virtualize Items="messages.OrderBy(m=>m.MessageDate).ToList()" Context="message">
        <li class=" @(message.UserName == chatMessage.UserName ? "user-message" : "broadcast-message")">
            <div class="chat-message">
                @message.Message
            </div>
            <div class="chat-meta">
             @message.MessageDate -  @message.UserName

            </div>
        </li>


    </Virtualize>

</ul>

<EditForm Model="chatMessage" OnValidSubmit="SendMessage">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <div class="col-form-label">Message</div>
        <InputTextArea class="form-control" @bind-Value="chatMessage.Message"></InputTextArea>
        <button class="btn mt-1 btn-primary" type="submit">Send</button>
    </div>

</EditForm>

@code {
    List<ChatMessage> messages = new();
    HubConnection hubConnection;
    ChatMessage chatMessage = new();

    protected override async Task OnInitializedAsync()
    {
        await SetChatUserName();
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.BaseUri + "hubs/ChatHub").Build();
        hubConnection.On<string, string>("SendMessage", async (message, userName) =>
         {
             var chatMessage = new ChatMessage { UserName = userName, Message = message, MessageDate = DateTime.Now };
             messages.Add(chatMessage);
             StateHasChanged();

         });
        await hubConnection.StartAsync();
    }


    public class ChatMessage
    {
        [Required]
        public string UserName { get; set; }
        [Required]
        public string Message { get; set; }
        public DateTime MessageDate { get; set; }

    }

    public async Task SetChatUserName()
    {
        chatMessage.UserName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userName");
    }


    public async Task SendMessage()
    {
        await hubConnection.SendAsync("SendMessage", chatMessage.UserName, chatMessage.Message);
        chatMessage.Message = "";
    }


}
